/*
 * JAMS REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: V6
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package jams

import (
	"context"
	"errors"
	"io/ioutil"
	"net/url"
)

// Linger please
var (
	_ context.Context
)

/*
UserInfo Provides information about the authenticated user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return Authentication
*/
func (client *APIClient) UserInfo(ctx context.Context) (Authentication, error) {
	if client.auth == nil {
		return Authentication{}, errors.New("missing login information")
	}
	var returnValue Authentication

	// create path and map variables
	apiPath := client.cfg.BasePath + "/api/authentication"

	headers := make(map[string]string)
	headers["Content-Type"] = "application/json"
	headers["Accept"] = "application/json"

	r, err := client.prepareRequest(ctx, apiPath, "GET", nil, headers, url.Values{})
	if err != nil {
		return returnValue, err
	}

	response, err := client.Call(r)
	if err != nil || response == nil {
		return returnValue, err
	}

	body, err := ioutil.ReadAll(response.Body)
	response.Body.Close()
	if err != nil {
		return returnValue, err
	}

	if response.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = client.decode(&returnValue, body, response.Header.Get("Content-Type"))
		return returnValue, err
	}

	if response.StatusCode >= 300 {
		newErr := Error{
			Body: body,
			Err:  response.Status,
		}

		if response.StatusCode == 200 {
			var v Authentication
			err = client.decode(&v, body, response.Header.Get("Content-Type"))
			if err != nil {
				newErr.Err = err.Error()
				return returnValue, newErr
			}
			newErr.Model = v
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	return returnValue, nil
}

/*
AuthenticationAPI Login to the web server
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param loginData The login credentials

@return AccessToken
*/
func (client *APIClient) Login(ctx context.Context, loginData LoginData) error {
	var returnValue AccessToken

	// create path and map variables
	apiPath := client.cfg.BasePath + "/api/authentication/login"

	headers := make(map[string]string)
	headers["Content-Type"] = "application/json"
	headers["Accept"] = "application/json"

	r, err := client.prepareRequest(ctx, apiPath, "POST", &loginData, headers, url.Values{})
	if err != nil {
		return err
	}

	response, err := client.Call(r)
	if err != nil || response == nil {
		return err
	}

	body, err := ioutil.ReadAll(response.Body)
	response.Body.Close()
	if err != nil {
		return err
	}

	if response.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = client.decode(&returnValue, body, response.Header.Get("Content-Type"))
		if err == nil {
			client.auth = &returnValue
		}
		return err
	}

	if response.StatusCode >= 300 {
		newErr := Error{
			Body: body,
			Err:  response.Status,
		}

		if response.StatusCode == 200 {
			var v AccessToken
			err = client.decode(&v, body, response.Header.Get("Content-Type"))
			if err != nil {
				newErr.Err = err.Error()
				return newErr
			}
			newErr.Model = v
			return newErr
		}

		return newErr
	}

	return nil
}
