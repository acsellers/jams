/*
 * JAMS REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: V6
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package jams

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/url"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type HistoryAPI service

/*
HistoryAPI Gets job execution history.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return []History
*/
func (a *HistoryAPI) History(ctx context.Context) ([]History, error) {
	var returnValue []History

	// create path and map variables
	apiPath := a.client.cfg.BasePath + "/api/history"

	headers := make(map[string]string)
	headers["Content-Type"] = "application/json"
	headers["Accept"] = "application/json"

	r, err := a.client.buildRequest(apiPath, "GET", nil, headers, url.Values{})
	if err != nil {
		return returnValue, err
	}

	response, err := a.client.Call(ctx, r)
	if err != nil || response == nil {
		return returnValue, err
	}

	body, err := ioutil.ReadAll(response.Body)
	response.Body.Close()
	if err != nil {
		return returnValue, err
	}

	if response.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&returnValue, body, response.Header.Get("Content-Type"))
		return returnValue, err
	}

	if response.StatusCode >= 300 {
		newErr := Error{
			Body: body,
			Err:  response.Status,
		}

		if response.StatusCode == 200 {
			var v []History
			err = a.client.decode(&v, body, response.Header.Get("Content-Type"))
			if err != nil {
				newErr.Err = err.Error()
				return returnValue, newErr
			}
			newErr.Model = v
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	return returnValue, nil
}

/*
HistoryAPI Gets job execution history using OData filters.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return PageResultHistory
*/
func (a *HistoryAPI) HistoryOdata(ctx context.Context) (PageResultHistory, error) {
	var returnValue PageResultHistory

	// create path and map variables
	apiPath := a.client.cfg.BasePath + "/api/history/odata"

	headers := make(map[string]string)
	headers["Content-Type"] = "application/json"
	headers["Accept"] = "application/json"

	r, err := a.client.buildRequest(apiPath, "GET", nil, headers, url.Values{})
	if err != nil {
		return returnValue, err
	}

	response, err := a.client.Call(ctx, r)
	if err != nil || response == nil {
		return returnValue, err
	}

	body, err := ioutil.ReadAll(response.Body)
	response.Body.Close()
	if err != nil {
		return returnValue, err
	}

	if response.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&returnValue, body, response.Header.Get("Content-Type"))
		return returnValue, err
	}

	if response.StatusCode >= 300 {
		newErr := Error{
			Body: body,
			Err:  response.Status,
		}

		if response.StatusCode == 200 {
			var v PageResultHistory
			err = a.client.decode(&v, body, response.Header.Get("Content-Type"))
			if err != nil {
				newErr.Err = err.Error()
				return returnValue, newErr
			}
			newErr.Model = v
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	return returnValue, nil
}

/*
HistoryAPI Gets log file as download or preview of first 512 kB.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param jobName The Job Name
 * @param ron The RON number
 * @param restartCount The Restart Count
 * @param optional nil or *HistoryApiHistoryGetJobLogOpts - Optional Parameters:
     * @param "IsPreview" (optional.Bool) -  If true, returns first 512 kB of log file. If false or omitted, returns log file as attachment

@return Object
*/

type HistoryApiHistoryGetJobLogOpts struct {
	IsPreview optional.Bool
}

func (a *HistoryAPI) JobLog(ctx context.Context, jobName string, ron, restartCount int, localVarOptionals *HistoryApiHistoryGetJobLogOpts) (Object, error) {
	var returnValue Object

	// create path and map variables
	apiPath := fmt.Sprintf(
		"%s/api/history/job/log/%s/%d/%d",
		a.client.cfg.BasePath,
		jobName,
		ron,
		restartCount,
	)

	queryParams := url.Values{}
	if localVarOptionals != nil && localVarOptionals.IsPreview.IsSet() {
		queryParams.Add("isPreview", parameterToString(localVarOptionals.IsPreview.Value(), ""))
	}

	headers := make(map[string]string)
	headers["Content-Type"] = "application/json"
	headers["Accept"] = "application/json"

	r, err := a.client.buildRequest(apiPath, "GET", nil, headers, queryParams)
	if err != nil {
		return returnValue, err
	}

	response, err := a.client.Call(ctx, r)
	if err != nil || response == nil {
		return returnValue, err
	}

	body, err := ioutil.ReadAll(response.Body)
	response.Body.Close()
	if err != nil {
		return returnValue, err
	}

	if response.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&returnValue, body, response.Header.Get("Content-Type"))
		return returnValue, err
	}

	if response.StatusCode >= 300 {
		newErr := Error{
			Body: body,
			Err:  response.Status,
		}

		if response.StatusCode == 200 {
			var v Object
			err = a.client.decode(&v, body, response.Header.Get("Content-Type"))
			if err != nil {
				newErr.Err = err.Error()
				return returnValue, newErr
			}
			newErr.Model = v
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	return returnValue, nil
}

/*
HistoryAPI Gets log file as download or preview of first 512 kB.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param setupName The Setup Name
 * @param ron The RON number
 * @param restartCount The Restart Count
 * @param optional nil or *HistoryApiHistoryGetSetupLogOpts - Optional Parameters:
     * @param "IsPreview" (optional.Bool) -  If true, returns first 512 kB of log file. If false or omitted, returns log file as attachment

@return Object
*/

type HistoryApiHistoryGetSetupLogOpts struct {
	IsPreview optional.Bool
}

func (a *HistoryAPI) SetupLog(ctx context.Context, setupName string, ron, restartCount int, localVarOptionals *HistoryApiHistoryGetSetupLogOpts) (Object, error) {
	var returnValue Object

	// create path and map variables
	apiPath := fmt.Sprintf(
		"%s/api/history/setup/log/%s/%d/%d",
		a.client.cfg.BasePath,
		setupName,
		ron,
		restartCount,
	)

	queryParams := url.Values{}
	if localVarOptionals != nil && localVarOptionals.IsPreview.IsSet() {
		queryParams.Add("isPreview", parameterToString(localVarOptionals.IsPreview.Value(), ""))
	}

	headers := make(map[string]string)
	headers["Content-Type"] = "application/json"
	headers["Accept"] = "application/json"

	r, err := a.client.buildRequest(apiPath, "GET", nil, headers, queryParams)
	if err != nil {
		return returnValue, err
	}

	response, err := a.client.Call(ctx, r)
	if err != nil || response == nil {
		return returnValue, err
	}

	body, err := ioutil.ReadAll(response.Body)
	response.Body.Close()
	if err != nil {
		return returnValue, err
	}

	if response.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&returnValue, body, response.Header.Get("Content-Type"))
		return returnValue, err
	}

	if response.StatusCode >= 300 {
		newErr := Error{
			Body: body,
			Err:  response.Status,
		}

		if response.StatusCode == 200 {
			var v Object
			err = a.client.decode(&v, body, response.Header.Get("Content-Type"))
			if err != nil {
				newErr.Err = err.Error()
				return returnValue, newErr
			}
			newErr.Model = v
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	return returnValue, nil
}
